# Header: Summary, imperative, start upper case, don't end with a period.
# The header has a special format that includes a type, a scope and a subject: <type>(<scope>): <subject>
# Must be one of the following: 
#  - build: Changes that affect the build system or external dependencies
#  - chore: Updating grunt tasks etc; no production code change
#  - ci: Changes to our CI configuration files and scripts
#  - docs: Documentation only changes
#  - feat: A new feature
#  - fix: A bug fix
#  - perf: A code change that improves performance
#  - refactor: A code change that neither fixes a bug nor adds a feature
#  - revert: Revert-type commits are used when reverting previous changes
#  - style: Changes that do not affect the meaning of the code
#  - test: Adding missing tests or correcting existing tests
# No more than 50 chars. #### 50 chars is here:  #

# Remember blank line between title and body.

# Body: Explain *what* and *why* (not *how*). Include task ID (Jira issue).
# Wrap at 72 chars. ################################## which is here:  #


# At the end: Include Co-authored-by for all contributors. 
# Include at least one empty line before it. Format: 
# Co-authored-by: name <user@users.noreply.github.com>

# How to Write a Git Commit Message:
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
